{"version":3,"sources":["components/BoardIndicator/BoardIndicator.tsx","components/BoardSquare/BoardSquare.tsx","components/GameBoard/GameBoard.tsx","components/Game-Step/Game-Step.tsx","components/StepsPanel/StepsPanel.tsx","App.tsx","index.tsx"],"names":["StyledBoardIndicator","styled","div","_templateObject","props","height","BoardIndicator","_ref","indicateOn","react_default","a","createElement","StyledBoardSquare","BoardSquare_templateObject","backgroundColor","BoardSquare","innerValue","onclickCallback","onClick","StyledGameBoard","GameBoard_templateObject","GameBoard","startSquare","endSquare","setNewGameStarted","setGameStarted","_useState","useState","undefined","_useState2","Object","slicedToArray","playerclickedIndex","setplayerclickedIndex","_useState3","_useState4","askForNewGame","setAskForNewGame","useEffect","boardSquares","useMemo","array","length","fill","map","el","i","className","item","components_BoardIndicator_BoardIndicator","key","square","components_BoardSquare_BoardSquare","StyledGameStep","Game_Step_templateObject","nextStep","stepDirection","GameStep","StyledStepPanel","StepsPanel_templateObject","StepsPanel","gameStarted","newGameStarted","setStartSquare","setEndSquare","arrayOfSteps","steps","setSteps","setNextStep","getRandomIntInclusive","min","max","Math","ceil","floor","random","timerSteps","setInterval","possibleSteps","arrayOFSquares","subArr","push","getNextStep","previousSteps","startedSquare","getStepHelper","includesValue","step","filter","stepNumber","includes","arr","previousNumber","getNewNumber","console","log","clearInterval","concat","toConsumableArray","setTimeout","counter","timerNextStep","Game_Step","StyledApp","section","App_templateObject","App","_useState5","_useState6","_useState7","_useState8","CSSTransition","in","timeout","classNames","unmountOnExit","components_GameBoard_GameBoard","components_StepsPanel_StepsPanel","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ca3a450f.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface StyledBoardIndicatorProps {\n  height?: string,\n}\n\nconst StyledBoardIndicator = styled.div < StyledBoardIndicatorProps > `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: ${props => props.height || '40px'};\n  background-color: aqua;\n`;\n\ntype BoardIndicatorProps = {\n  indicateOn: number | string,\n  height?: string,\n}\n\nconst BoardIndicator: React.FC < BoardIndicatorProps > = (\n  { indicateOn,\n    height }\n) => (\n  <StyledBoardIndicator height={height}>\n    {indicateOn}\n  </StyledBoardIndicator>\n);\n\nexport default BoardIndicator;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface StyledBoardSquareProps {\n  backgroundColor?: string,\n}\n\nconst StyledBoardSquare = styled.div < StyledBoardSquareProps > `\n  height: 100%;\n  width: 100%;\n  background-color: ${\n  (props)=>props.backgroundColor?\n    props.backgroundColor : '#c595ff'\n};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: 1px solid transparent;\n  &:hover{\n    border-color: black;\n  }\n`;\n\ninterface BoardSquareProps {\n  innerValue?: string,\n  backgroundColor?: string,\n  onclickCallback: ()=>void,\n}\n\nconst BoardSquare: React.FC <BoardSquareProps> = (\n  {\n    innerValue,\n    backgroundColor,\n    onclickCallback,\n  }\n) => (\n  <StyledBoardSquare\n    onClick={onclickCallback}\n    backgroundColor={backgroundColor}\n  >\n    {innerValue}\n  </StyledBoardSquare>\n);\n\nexport default BoardSquare;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport StyledBoardIndicator from '../BoardIndicator/BoardIndicator';\nimport BoardSquare from '../BoardSquare/BoardSquare';\n\ninterface EventTarget {\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n  dispatchEvent(evt: Event): boolean;\n  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface SyntheticEvent {\n  bubbles: boolean;\n  cancelable: boolean;\n  currentTarget: EventTarget;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  nativeEvent: Event;\n  preventDefault(): void;\n  stopPropagation(): void;\n  target: EventTarget;\n  timeStamp: Date;\n  type: string;\n}\n\nconst StyledGameBoard = styled.div`\n  position: relative;\n  width: 100%;\n  height: 300px;\n  border: 1px solid red;\n  .start-new-game-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%);\n    width: 100%;\n    height: 100%;\n    background-color: rgba(126,126,126,0.3);\n  }\n  .start-new-game-button {\n    border: 1px solid black;\n    padding: 10px;\n    cursor: pointer;\n    &:hover {\n      background-color: darkred;\n    }\n  }\n  .top-indicators {\n    display: grid;\n    grid-template-rows: 1fr;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 20px;\n    margin-left: 40px;\n  }\n  .container-board-indicators-and-squares {\n    display: flex;\n    width: 100%;\n    height: 100%;\n  }\n  .side-indicators{\n    margin-top: 20px;\n    height: calc(100% - 40px);\n    width: 20px;\n    display: grid;\n    grid-template-rows: repeat(3, 1fr);\n    grid-template-columns: 1fr;\n    grid-gap: 20px;\n  }\n  .container-for-squares{\n    margin-top: 20px;\n    margin-left: 20px;\n    flex-grow: 1;\n    height: calc(100% - 40px);\n    display: grid;\n    grid-template-rows: repeat(3, 1fr);\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 20px;\n  }\n`;\n\ninterface GameBoardProps {\n  startSquare: number | undefined,\n  endSquare: number | undefined,\n  setNewGameStarted: (newGameStarted: boolean)=>void,\n  setGameStarted: (gameStarted: boolean)=>void,\n}\n\nconst GameBoard: React.FC <GameBoardProps> = (\n  {\n    startSquare,\n    endSquare,\n    setNewGameStarted,\n    setGameStarted,\n  }\n) => {\n  const [playerclickedIndex, setplayerclickedIndex] = useState< number | undefined >(undefined);\n  const [askForNewGame, setAskForNewGame] = useState(false);\n\n  useEffect(() => {\n    if (playerclickedIndex) {\n      setAskForNewGame(true);\n    }\n  }, [playerclickedIndex]);\n\n  const boardSquares: Array<number> = useMemo(() => {\n    const array: Array<number|undefined> = [];\n\n    array.length = 9;\n    array.fill(1);\n\n    return array.map((el, i) => i + 1);\n  }, []);\n\n  return (\n    <StyledGameBoard>\n      {\n        askForNewGame && (\n          <div className=\"start-new-game-container\">\n            <button\n              className=\"start-new-game-button\"\n              onClick={() => {\n                setplayerclickedIndex(undefined);\n                setAskForNewGame(false);\n                setNewGameStarted(true);\n              }}\n            >\n              Start new game\n            </button>\n            <button\n              className=\"start-new-game-button\"\n              onClick={() => {\n                setplayerclickedIndex(undefined);\n                setAskForNewGame(false);\n                setGameStarted(false);\n                setNewGameStarted(true)\n              }}\n            >\n              exit\n            </button>\n          </div>\n        )\n\n      }\n\n      <div className=\"top-indicators\">\n        {\n          ['A', 'B', 'C']\n            .map(\n              item => (\n                <StyledBoardIndicator key={item} height=\"20px\" indicateOn={item} />\n              )\n            )\n        }\n      </div>\n      <div className=\"container-board-indicators-and-squares\">\n        <div className=\"side-indicators\">\n          {\n            [1, 2, 3]\n              .map(\n                item => <StyledBoardIndicator key={item} height=\"100%\" indicateOn={item} />\n              )\n          }\n\n        </div>\n\n        <div\n          className=\"container-for-squares\"\n        >\n          {\n            boardSquares\n              .map(\n                (square, i) => (\n                  <BoardSquare\n                    key={square + i}\n                    onclickCallback={() => {\n                      if (endSquare) {\n                        setplayerclickedIndex(i + 1);\n                      }\n                    }}\n\n                    backgroundColor={\n                      playerclickedIndex === endSquare\n                      && playerclickedIndex === i + 1\n                        ? 'green'\n                        : playerclickedIndex === i + 1 ? 'red' : ''\n                    }\n\n                    innerValue={\n                      (() => {\n                        if (i + 1 === startSquare && i + 1 === endSquare && playerclickedIndex) {\n                          return 'START END';\n                        }\n\n                        if (i + 1 === startSquare) {\n                          return 'START';\n                        }\n\n                        if (i + 1 === endSquare && playerclickedIndex) {\n                          return 'END';\n                        }\n                      })()\n                    }\n                  />\n                )\n              )\n          }\n        </div>\n      </div>\n    </StyledGameBoard>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface StyledGameStepProps {\n  nextStep?: boolean,\n  stepDirection?: string,\n}\n\nconst StyledGameStep = styled.div < StyledGameStepProps > `\ntransition: all 0.5s;\n  height: 100%;\n  background-color: ${props => (props.nextStep ? 'red' : 'cadetblue')};\n  background-image: url(\n  ${\n  (props) => {\n    switch (props.stepDirection) {\n      case 'top': return 'images/arrow-top.png';\n      case 'right': return 'images/arrow-right.png';\n      case 'bottom': return 'images/arrow-bottom.png';\n      case 'left': return 'images/arrow-left.png';\n      default: return '';\n    }\n  }\n}\n  );\n  background-size: contain;\n  \n`;\n\ntype GameStepProps = {\n  nextStep?: boolean,\n  stepDirection?: string,\n}\n\nconst GameStep: React.FC < GameStepProps > = (\n  {\n    nextStep,\n    stepDirection,\n\n  }\n) => (\n  <StyledGameStep nextStep={nextStep} stepDirection={stepDirection} />\n);\n\nexport default GameStep;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport GameStep from '../Game-Step/Game-Step';\n\nconst StyledStepPanel = styled.div`\n  display: grid;\n  grid-template-rows: repeat(2, 45px);\n  grid-template-columns: repeat(5, 45px);\n  justify-content: center;\n  grid-gap: 10px;\n`;\n\ntype StepsPanelProps = {\n  gameStarted: boolean,\n  newGameStarted: boolean,\n  setNewGameStarted: (newGameStarted: boolean)=>void,\n  setStartSquare: (startSquare: number|undefined)=>void,\n  setEndSquare: (endSquare: number|undefined)=>void,\n}\n\nconst StepsPanel: React.FC <StepsPanelProps> = (\n  { gameStarted,\n    setNewGameStarted,\n    newGameStarted,\n    setStartSquare,\n    setEndSquare }\n) => {\n  const arrayOfSteps: Array<number | undefined> = useMemo(() => {\n    const array: Array<number | undefined> = [];\n\n    array.length = 10;\n    array.fill(1);\n\n    return array;\n  }, []);\n\n  type Istep = {\n    step: string,\n    stepNumber: number,\n  }\n\n  const [steps, setSteps] = useState<Istep[]>([]);\n  const [nextStep, setNextStep] = useState< number|undefined >(undefined);\n\n\n  useEffect(()=>{\n    if(newGameStarted){\n      setNextStep(undefined);\n      setSteps([]);\n      setStartSquare(undefined);\n      setEndSquare(undefined);\n      setNewGameStarted(false);\n    }\n  },[newGameStarted])\n\n  useEffect(() => {\n    /* function to ger random int */\n    const getRandomIntInclusive = (min: number, max: number): number => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n\n      return Math.floor(Math.random() * (max - min + 1)) + min; // Включаючи мінімум та максимум\n    };\n\n\n    if (gameStarted && !newGameStarted && steps.length === 0) {\n\n\n      /* get start square on game board */\n      const startSquare = getRandomIntInclusive(1, 9);\n\n      /* set start square on game board */\n      setStartSquare(startSquare);\n\n      const timerSteps = setInterval(() => {\n        /* possible steps array */\n        const possibleSteps: Array<string> = ['top', 'right', 'bottom', 'left'];\n\n        /* array represents gameboard swqures */\n        const arrayOFSquares: number[][] = [];\n\n        for (let i = 1; i <= 9; i += 3) {\n          const subArr = [];\n\n          for (let a = i; a < i + 3; a += 1) {\n            subArr.push(a);\n          }\n          arrayOFSquares.push(subArr);\n        }\n\n        /* function gets next step */\n        const getNextStep = (previousSteps: Array<Istep>, startedSquare: number):Istep => {\n          const getStepHelper = (includesValue: number):Istep => {\n            /* check angles of sides on possible steps */\n\n            /* left top angle */\n            if (includesValue === 1) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'top' && step !== 'left'\n                )[getRandomIntInclusive(0, 1)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* top right angle */\n            if (includesValue === 3) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'top' && step !== 'right'\n                )[getRandomIntInclusive(0, 1)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* bottom right angle */\n            if (includesValue === 9) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'bottom' && step !== 'right'\n                )[getRandomIntInclusive(0, 1)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* bottom left angle */\n            if (includesValue === 7) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'bottom' && step !== 'left'\n                )[getRandomIntInclusive(0, 1)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* check all sides */\n\n            /* top side */\n            if (arrayOFSquares[0].includes(includesValue)) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'top'\n                )[getRandomIntInclusive(0, 2)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* right side */\n            if (arrayOFSquares.map(arr => arr[arr.length - 1]).includes(includesValue)) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'right'\n                )[getRandomIntInclusive(0, 2)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* bottom side */\n            if (arrayOFSquares[arrayOFSquares.length - 1].includes(includesValue)) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'bottom'\n                )[getRandomIntInclusive(0, 2)],\n                stepNumber: includesValue,\n              };\n            }\n\n            /* left side */\n            if (arrayOFSquares.map(arr => arr[0]).includes(includesValue)) {\n              return {\n                step: possibleSteps.filter(\n                  step => step !== 'left'\n                )[getRandomIntInclusive(0, 2)],\n                stepNumber: includesValue,\n              };\n            }\n\n            return {\n              step: possibleSteps[getRandomIntInclusive(0, 3)],\n              stepNumber: includesValue,\n            };\n          };\n\n          if (previousSteps.length > 0) {\n            const previousNumber = previousSteps[previousSteps.length - 1].stepNumber;\n\n            const getNewNumber = (): number => {\n              switch (previousSteps[previousSteps.length - 1].step) {\n                case 'top': {\n                  return previousNumber - 3;\n                }\n\n                case 'bottom': {\n                  return previousNumber + 3;\n                }\n\n                case 'right': {\n                  return previousNumber + 1;\n                }\n\n                case 'left': {\n                  return previousNumber - 1;\n                }\n              }\n\n              return 1;\n            };\n\n            return getStepHelper(getNewNumber());\n          }\n\n          return getStepHelper(startedSquare);\n        };\n        console.log(steps)\n        setSteps((steps) => {\n          if (steps.length === 11) {\n            clearInterval(timerSteps);\n            console.log(steps);\n            setEndSquare(steps[steps.length - 1].stepNumber);\n          }\n\n          return [...steps, getNextStep(steps, startSquare)];\n        });\n      }, 1000);\n\n      setTimeout(() => {\n        let counter = 0;\n        const timerNextStep = setInterval(() => {\n          console.log(counter)\n          if (counter === 10) {\n            clearInterval(timerNextStep);\n          }\n          setNextStep(counter);\n          counter += 1;\n        }, 1000);\n      }, 1000);\n    }\n  }, [gameStarted, newGameStarted, steps]);\n\n  return (\n    <StyledStepPanel>\n      {\n        arrayOfSteps\n          .map(\n            (step, i) => (\n              <GameStep\n                key={i}\n                nextStep={nextStep === i}\n                stepDirection={steps[i] ? steps[i].step : ''}\n              />\n            )\n          )\n      }\n    </StyledStepPanel>\n  );\n};\n\nexport default StepsPanel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport styled from 'styled-components';\nimport { CSSTransition } from 'react-transition-group';\nimport GameBoard from './components/GameBoard/GameBoard';\nimport StepsPanel from './components/StepsPanel/StepsPanel';\n\nconst StyledApp = styled.section`\n  .game-heading {\n    font-size: 20px;\n    margin:  0 auto;\n    text-align: center;\n  }\n  .game-board-container {\n     position:relative;\n     max-width: 400px;\n     min-height: 300px;\n     margin-top: 50px;\n     margin-right: auto;\n     margin-left: auto;\n  }\n  .steps-panel-container {\n    max-width: 300px;\n    margin-top: 20px;\n    margin-right: auto;\n    margin-left: auto;\n  }\n  .game-start-button {\n    padding: 10px;\n    border-radius: 1px;\n    background-color: azure;\n    border: 1px solid gray;\n    outline: none;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%);\n    &:hover {\n    background-color: aliceblue;\n    cursor: pointer;\n    }\n  }\n  /* This fires as soon as the element enters the dorm */\n.list-transition-enter,\n.list-transition-appear {\n  /*We give the list the initial dimension of the list button*/\n transform: rotateX(90deg);\n transform: rotateY(90deg);\n \n}\n/* This is where we can add the transition*/\n.list-transition-enter-active,\n.list-transition-appear-active {\n  transform: rotateX(0deg);\n  transform: rotateY(0deg);\n  transition: all 2000ms;\n}\n\n/* This fires as soon as the this.state.showList is false */\n.list-transition-exit {\n transform: rotateX(0deg);\n  background-color: #9e8949;\n}\n/* fires as element leaves the DOM*/\n.list-transition-exit-active {\n  transform: rotateX(90deg);\n  transition: all 2000ms;\n}\n`;\n\nconst App: React.FC = () => {\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [startSquare, setStartSquare] = useState<undefined|number>(undefined);\n  const [endSquare, setEndSquare] = useState<undefined|number>(undefined);\n  const [newGameStarted, setNewGameStarted] = useState(false);\n\n  return (\n    <StyledApp>\n      <h1 className=\"game-heading\">Лабиринт</h1>\n      <div className=\"game-board-container\">\n        {\n          !gameStarted && (\n            <button\n              onClick={() => {\n                setGameStarted(true);\n              }}\n              className=\"game-start-button\"\n            >\n              Играть\n            </button>\n          )\n        }\n        <CSSTransition\n          in={gameStarted}\n          timeout={2000}\n          classNames=\"list-transition\"\n          unmountOnExit\n\n        >\n          <GameBoard\n            setGameStarted={setGameStarted}\n            setNewGameStarted={setNewGameStarted}\n            startSquare={startSquare}\n            endSquare={endSquare}\n          />\n        </CSSTransition>\n\n      </div>\n      <div className=\"steps-panel-container\">\n        <StepsPanel\n          gameStarted={gameStarted}\n          newGameStarted={newGameStarted}\n          setNewGameStarted={setNewGameStarted}\n          setStartSquare={setStartSquare}\n          setEndSquare={setEndSquare}\n        />\n      </div>\n    </StyledApp>\n\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}